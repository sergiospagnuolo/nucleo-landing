I"H<div id="vis-container"></div>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;script type="text/javascript"&gt;
        // Load and munge data, then make the visualization.
        var fileName = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSNUTUrLUfC1pfMLws3yeigS5GqUN8Od6f5u9dJfNztgEgno6C_kUzgMLyogUj2WKJst1RbmN-sudYf/pub?gid=2037943868&amp;single=true&amp;output=csv";
        var dia_semana = ["dia de semana", "fim de semana"];

        d3.csv(fileName, function(error, data) {
            var trafego = {};
            data.forEach(function(d) {
                var cereal = d.cereal;
                trafego[cereal] = [];

                // { cerealName: [ bar1Val, bar2Val, ... ] }
                dia_semana.forEach(function(field) {
                    trafego[cereal].push( +d[field] );
                });
            });
            makeVis(trafego);
        });

        var makeVis = function(trafego) {
            // Define dimensions of vis
            var margin = { top: 30, right: 50, bottom: 30, left: 50 },
                width  = 550 - margin.left - margin.right,
                height = 250 - margin.top  - margin.bottom;

            // Make x scale
            var xScale = d3.scale.ordinal()
                .domain(dia_semana)
                .rangeRoundBands([0, width], 0.1);

            // Make y scale, the domain will be defined on bar update
            var yScale = d3.scale.linear()
                .range([height, 0]);

            // Create canvas
            var canvas = d3.select("#vis-container")
              .append("svg")
                .attr("width",  width  + margin.left + margin.right)
                .attr("height", height + margin.top  + margin.bottom)
              .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            // Make x-axis and add to canvas
            var xAxis = d3.svg.axis()
                .scale(xScale)
                .orient("bottom");

            canvas.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

            // Make y-axis and add to canvas
            var yAxis = d3.svg.axis()
                .scale(yScale)
                .orient("left");

            var yAxisHandleForUpdate = canvas.append("g")
                .attr("class", "y axis")
                .call(yAxis);

            yAxisHandleForUpdate.append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Value");

            var updateBars = function(data) {
                // First update the y-axis domain to match data
                yScale.domain( d3.extent(data) );
                yAxisHandleForUpdate.call(yAxis);

                var bars = canvas.selectAll(".bar").data(data);

                // Add bars for new data
                bars.enter()
                  .append("rect")
                    .attr("class", "bar")
                    .attr("x", function(d,i) { return xScale( dia_semana[i] ); })
                    .attr("width", xScale.rangeBand())
                    .attr("y", function(d,i) { return yScale(d); })
                    .attr("height", function(d,i) { return height - yScale(d); });

                // Update old ones, already have x / width from before
                bars
                    .transition().duration(250)
                    .attr("y", function(d,i) { return yScale(d); })
                    .attr("height", function(d,i) { return height - yScale(d); });

                // Remove old ones
                bars.exit().remove();
            };

            // Handler for dropdown value change
            var dropdownChange = function() {
                var newCereal = d3.select(this).property('value'),
                    newData   = trafego[newCereal];

                updateBars(newData);
            };

            // Get names of cereals, for dropdown
            var cereals = Object.keys(trafego).sort();

            var dropdown = d3.select("#vis-container")
                .insert("select", "svg")
                .on("change", dropdownChange);

            dropdown.selectAll("option")
                .data(cereals)
              .enter().append("option")
                .attr("value", function (d) { return d; })
                .text(function (d) {
                    return d[0].toUpperCase() + d.slice(1,d.length); // capitalize 1st letter
                });

            var initialData = trafego[ cereals[0] ];
            updateBars(initialData);
        };
    &lt;/script&gt;
</code></pre></div></div>

<hr />

<h6 id="é-importante-porque">É importante porque…</h6>

<ul>
  <li>
    <p><em>Repatriação de brasileiros no exterior tem sido prioridade para o Itamaraty</em></p>
  </li>
  <li>
    <p><em>Milhares de brasileiros ainda estão fora do país e buscam voltar</em></p>
  </li>
</ul>

<hr />

<hr />

<h3 id="metodologia">METODOLOGIA</h3>

<p>O governo federal criou uma <a href="http://www.portaltransparencia.gov.br/comunicados/603503-portal-da-transparencia-divulga-gastos-federais-especificos-para-combate-ao-coronavirus">rubrica orçamentária</a> específica para gastos federais no combate ao coronavírus.</p>

<p>A partir desses dados, o <strong>Núcleo</strong> extraiu as informações do site do Portal da Transparência com este código e filtrou os dados de gastos com transporte do Itamaraty.</p>

<p>A rubrica da ação é “21C0 - ENFRENTAMENTO DA EMERGENCIA DE SAUDE PUBLICA DE IMPORTANCIA INTERNACIONAL DECORRENTE DO CORONAVIRUS”, e o elemento da despesa é “33 - Passagens e Despesas com Locomoção”.</p>

<p>Já foram empenhados mais de R$3 bilhões sob essa rubrica, sem considerar políticas de auxílio econômico.</p>
:ET